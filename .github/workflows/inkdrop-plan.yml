on:
  workflow_call:
    inputs:
      terraform_version:
        type: string
        required: true
        description: The version of Terraform to use
      plan_artifact:
        type: string
        required: true
        description: The name of the artifact containing the plan file
      plan_file_name:
        type: string
        required: true
        description: The name of the plan file
      terraform_relative_dir:
        type: string
        default: .
        required: false
        description: The relative directory of the Terraform configuration
      data_branch_name:
        type: string
        default: inkdrop-ci-data
        required: false
        description: The name of the branch to store the Inkdrop images and CI data
      inkdrop_version:
        type: string
        default: latest
        required: false
        description: The version of Inkdrop to use (vX.Y.Z format)
      diagram_readme:
        type: boolean
        default: true
        required: false
        description: Whether to update the README with the Inkdrop diagram
      modules_diagram_readme:
        type: boolean
        default: true
        required: false
        description: Whether to update the READMEs of each module with the Inkdrop diagram
      
      
jobs:
  run_inkdrop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Terraform
        working-directory: ${{ inputs.terraform_relative_dir }}
        run: |
          terraform init -backend=false

      - name: Configure git
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"  

      - name: Create Orphan Branch (if necessary)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking if '${{ inputs.data_branch_name }}' branch exists..."
          EXISTS=$(git ls-remote --heads origin ${{ inputs.data_branch_name }} | wc -l)
          if [ "$EXISTS" -eq "0" ]; then
            TEMP_DIR=$(mktemp -d)
            cd $TEMP_DIR
            git init
            git remote add origin ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git
            git config http.${GITHUB_SERVER_URL}/.extraheader "AUTHORIZATION: basic $(echo -n x-access-token:${{ secrets.GITHUB_TOKEN }} | base64)"            
            touch README.md
            echo "### Branch used to store Inkdrop CI images and data" > README.md
            git add .
            git commit -m "Initial commit on orphan branch ${{ inputs.data_branch_name }}"
            
            git push --set-upstream origin master:refs/heads/${{ inputs.data_branch_name }}
            
            cd -
            rm -rf $TEMP_DIR
          else
            echo "'${{ inputs.data_branch_name }}' branch already exists."
          fi
          
      - name: Download and install Inkdrop
        run: |
          if [ "${{ inputs.inkdrop_version }}" = "latest" ]; then
            wget https://github.com/inkdrop-org/inkdrop-visualizer/releases/latest/download/inkdrop-linux-x64.tar.gz
          else
            wget https://github.com/inkdrop-org/inkdrop-visualizer/releases/download/${{ inputs.inkdrop_version }}/inkdrop-linux-x64.tar.gz
          fi
          tar -xzf inkdrop-linux-x64.tar.gz
          chmod +x inkdrop
          mv inkdrop /usr/local/bin/

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.plan_artifact }}
          path: ${{ inputs.terraform_relative_dir }}

      - name: Find module names and paths
        id: find_modules
        if: ${{ inputs.modules_diagram_readme && inputs.diagram_readme }}
        run: |
          shopt -s nullglob
          tf_files=(./*.tf)
          modules_json="["
          first=true

          for file in "${tf_files[@]}"; do
              while IFS= read -r line ; do
                  module_name=$(echo "$line" | awk '{print $2}' | tr -d '"' | tr -d "{")
                  # Extracting the source path, considering only local modules starting with ./
                  source_path=$(grep -A 2 "module \"$module_name\"" "$file" | grep "source" | awk -F'= ' '{print $2}' | tr -d '"' | tr -d '"')
                  
                  if [[ $source_path = ./* ]]; then
                      if $first; then
                          first=false
                      else
                          modules_json+=","
                      fi
                      
                      module_json=$(jq -n --arg name "$module_name" --arg path "$source_path" \
                          '{name: $name, path: $path}')
                      modules_json+="$module_json"
                  fi
              done < <(grep -E '^module "' "$file")
          done

          modules_json+="]"
          shopt -u nullglob

          # Using jq to parse the JSON environment variable and extract module names
          module_names=$(echo $modules_json | jq -r '.[].name')
          module_paths=$(echo $modules_json | jq -r '.[].path')

          # Convert the newline-separated jq output into space-separated module names
          module_names_array=($module_names)
          module_paths_array=($module_paths)

          echo "TERRAFORM_MODULE_NAMES='${module_names_array[@]}'" >> $GITHUB_OUTPUT
          echo "TERRAFORM_MODULE_PATHS='${module_paths_array[@]}'" >> $GITHUB_OUTPUT

        working-directory: ${{ inputs.terraform_relative_dir }}

      - name: Run Inkdrop for PR comment
        run: |
          inkdrop ${{inputs.plan_file_name}} --ci
        working-directory: ${{ inputs.terraform_relative_dir }}

      - name: Run Inkdrop for README diagrams
        if: ${{ inputs.diagram_readme }}
        run: |
          inkdrop_cmd="inkdrop ${{inputs.plan_file_name}} --ci --opacity-full --show-unchanged"
          if [ "${{ inputs.modules_diagram_readme }}" = "true" ]; then
            inkdrop_cmd+=" --modules $(echo ${{ steps.find_modules.outputs.TERRAFORM_MODULE_NAMES }})"
          fi
          echo "Running Inkdrop with command: $inkdrop_cmd"
          eval $inkdrop_cmd
        working-directory: ${{ inputs.terraform_relative_dir }}

      - name: Capture SVG and Inkdrop Data
        id: find_svg
        working-directory: ${{ inputs.terraform_relative_dir }}
        run: |
          SVG_FILE_PR=$(ls -Art inkdrop-diagram_*.svg | sed -n '1 p')
          INKDROP_DATA_PR=$(ls -Art inkdrop-ci-data_*.json | sed -n '1 p')
          echo "Found SVG for PR: $SVG_FILE_PR"
          echo "svg_pr_file_name=${SVG_FILE_PR}" >> $GITHUB_OUTPUT
          echo "Found Inkdrop Data for PR: $INKDROP_DATA_PR"
          echo "inkdrop_pr_data_name=${INKDROP_DATA_PR}" >> $GITHUB_OUTPUT

          if [ "${{ inputs.diagram_readme }}" = "true" ]; then
            SVG_FILE_README=$(ls -Art inkdrop-diagram_*.svg | sed -n '2 p')
            echo "Found SVG for README: $SVG_FILE_README"
            echo "svg_readme_file_name=${SVG_FILE_README}" >> $GITHUB_OUTPUT
            INKDROP_DATA_README=$(ls -Art inkdrop-ci-data_*.json | sed -n '2 p')
            echo "Found Inkdrop Data for README: $INKDROP_DATA_README"
            echo "inkdrop_readme_data_name=${INKDROP_DATA_README}" >> $GITHUB_OUTPUT
          fi
          MODULE_SVGS="{"
          MODULE_DATA="{"
          for module in $(echo ${{steps.find_modules.outputs.TERRAFORM_MODULE_NAMES}}); do
            MODULE_SVG_FILE=$(ls -Art module.${module}_*.svg | tail -n 1)
            echo "Found SVG for module ${module}: $MODULE_SVG_FILE"
            MODULE_SVGS=${MODULE_SVGS}",\"${module}\":\"${MODULE_SVG_FILE}\""
            MODULE_INKDROP_DATA=$(ls -Art inkdrop-ci-data-${module}_*.json | tail -n 1)
            echo "Found Inkdrop Data for module ${module}: $MODULE_INKDROP_DATA"
            MODULE_DATA=${MODULE_DATA}",\"${module}\":\"${MODULE_INKDROP_DATA}\""
          done
          MODULE_SVGS=${MODULE_SVGS}"}"
          MODULE_DATA=${MODULE_DATA}"}"
          MODULE_SVGS=$(echo $MODULE_SVGS | sed 's/,//')
          MODULE_DATA=$(echo $MODULE_DATA | sed 's/,//')
          echo "module_svgs=${MODULE_SVGS}" >> $GITHUB_OUTPUT
          echo "module_inkdrop_data=${MODULE_DATA}" >> $GITHUB_OUTPUT

      - name: Commit and push SVG and inkdrop-ci-data to inkdrop data branch
        uses: actions/github-script@v6
        env:
          PR_ID: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const pushDiagramReadme = "${{ inputs.diagram_readme }}";
            const pushModulesDiagrams = "${{ inputs.modules_diagram_readme }}";

            const modules = pushModulesDiagrams === "true" ?
                "${{ steps.find_modules.outputs.TERRAFORM_MODULE_NAMES }}".replace(/'/g, '') :
                "";
            const moduleSvgs = JSON.parse('${{ steps.find_svg.outputs.module_svgs }}');
            const moduleInkdropData = JSON.parse('${{ steps.find_svg.outputs.module_inkdrop_data }}');

            const paths = [
                '${{ inputs.terraform_relative_dir }}/${{ steps.find_svg.outputs.svg_pr_file_name }}',
                '${{ inputs.terraform_relative_dir }}/${{ steps.find_svg.outputs.inkdrop_pr_data_name }}',
                ...(pushDiagramReadme === "true" ? [
                    '${{ inputs.terraform_relative_dir }}/${{ steps.find_svg.outputs.svg_readme_file_name }}',
                    '${{ inputs.terraform_relative_dir }}/${{ steps.find_svg.outputs.inkdrop_readme_data_name }}',
                ] : []),
                ...(modules ? modules.split(" ").map(module => {
                    return '${{ inputs.terraform_relative_dir }}/' + moduleSvgs[module];
                }
                ) : []),
                ...(modules ? modules.split(" ").map(module => {
                    return '${{ inputs.terraform_relative_dir }}/' + moduleInkdropData[module];
                }
                ) : []),
            ]

            const names = [
                '${{ steps.find_svg.outputs.svg_pr_file_name }}',
                '${{ steps.find_svg.outputs.inkdrop_pr_data_name }}',
                ...(pushDiagramReadme === "true" ? [
                    '${{ steps.find_svg.outputs.svg_readme_file_name }}',
                    '${{ steps.find_svg.outputs.inkdrop_readme_data_name }}',
                ] : []),
                ...(modules ? modules.split(" ").map(module => {
                    return moduleSvgs[module];
                }
                ) : []),
                ...(modules ? modules.split(" ").map(module => {
                    return moduleInkdropData[module];
                }
                ) : []),
            ]

            const contentsBase64 = paths.map(path => Buffer.from(fs.readFileSync(
                path, { encoding: 'utf-8' }
            )).toString('base64'));

            const branch = '${{ inputs.data_branch_name }}';
            const newFilePaths = names.map((name) => {
                return `inkdrop-data/PR${process.env.PR_ID}/${name}`;
            })

            const files = newFilePaths.map((path, index) => {
                return {
                    path,
                    content: contentsBase64[index],
                }
            });

            async function createBlobForFile(github, owner, repo, content) {
                const blobData = await github.rest.git.createBlob({
                    owner,
                    repo,
                    content,
                    encoding: 'base64',
                });
                return blobData.data.sha;
            }

            async function pushFilesToRepo() {
                let blobs = [];

                // Create blobs for file contents
                for (let file of files) {
                    const blobSha = await createBlobForFile(github, owner, repo, file.content);
                    blobs.push({
                        sha: blobSha,
                        path: file.path,
                        mode: '100644', // blob type
                        type: 'blob',
                    });
                }

                // Get the current commit SHA and tree SHA of the branch you're updating
                const { data: refData } = await github.rest.git.getRef({
                    owner,
                    repo,
                    ref: `heads/${branch}`,
                });
                const parentSha = refData.object.sha;
                const { data: commitData } = await github.rest.git.getCommit({
                    owner,
                    repo,
                    commit_sha: parentSha,
                });
                const treeSha = commitData.tree.sha;

                // Create a new tree with base as existing tree
                const { data: newTreeData } = await github.rest.git.createTree({
                    owner,
                    repo,
                    base_tree: treeSha,
                    tree: blobs,
                });

                // Create a new commit with this tree
                const { data: newCommitData } = await github.rest.git.createCommit({
                    owner,
                    repo,
                    message: 'Inkdrop data and diagrams for PR#' + process.env.PR_ID,
                    tree: newTreeData.sha,
                    parents: [parentSha],
                });

                // Update the branch reference to this new commit
                await github.rest.git.updateRef({
                    owner,
                    repo,
                    ref: `heads/${branch}`,
                    sha: newCommitData.sha,
                });
            }

            pushFilesToRepo().catch(err => console.error(err));

      - name: Comment PR with Inkdrop SVG Image Link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prId = ${{ github.event.pull_request.number }};
            const svgFileName = '${{ steps.find_svg.outputs.svg_pr_file_name }}'.split('/').pop();
            const inkdropDataFileName = '${{ steps.find_svg.outputs.inkdrop_pr_data_name }}';
            const inkdropDataUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${{ inputs.data_branch_name }}/inkdrop-data/PR${prId}/${encodeURIComponent(inkdropDataFileName)}`;
            const svgUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${{ inputs.data_branch_name }}/inkdrop-data/PR${prId}/${encodeURIComponent(svgFileName)}?raw=true`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prId,
              body: `### Inkdrop Diagram\n![Inkdrop Diagram SVG](${svgUrl})*[Inkdrop Data JSON](${inkdropDataUrl}). Install the [Inkdrop Chrome Extension](https://chromewebstore.google.com/detail/visualize-your-terraform/pddpcicnnongifmhilbamagnhiiibkki) to hide this caption and enable interactive mode.*`
            });

      - name: Ensure README and Update with Inkdrop Diagram via GitHub API
        uses: actions/github-script@v6
        if: ${{ inputs.diagram_readme }}
        with:
          script: |
            const path = require('path');
            const svgBranch = '${{ inputs.data_branch_name }}';
            const branch = process.env.HEAD_BRANCH || github.context.ref.replace('refs/heads/', '');
            const workingDir = '${{ inputs.terraform_relative_dir }}';

            const pushModulesDiagrams = "${{ inputs.modules_diagram_readme }}";

            const prId = '${{ github.event.pull_request.number }}';
            const modules = pushModulesDiagrams === "true" ?
                "${{ steps.find_modules.outputs.TERRAFORM_MODULE_NAMES }}".replace(/'/g, '').split(' ') : [];
            modules.push("ROOT");
            const modulePaths = pushModulesDiagrams === "true" ?
                "${{ steps.find_modules.outputs.TERRAFORM_MODULE_PATHS }}".replace(/'/g, '').split(' ') : [];
            modulePaths.push(".")
            const moduleSvgs = pushModulesDiagrams === "true" ?
                JSON.parse(`${{ steps.find_svg.outputs.module_svgs }}`) : {};
            const moduleJsons = pushModulesDiagrams === "true" ?
                JSON.parse(`${{ steps.find_svg.outputs.module_inkdrop_data }}`) : {};
            moduleSvgs["ROOT"] = "${{ steps.find_svg.outputs.svg_readme_file_name }}";
            moduleJsons["ROOT"] = "${{ steps.find_svg.outputs.inkdrop_readme_data_name }}";


            let tree = []; // Preparing a new tree for batch update

            for (let i = 0; i < modules.length; i++) {
                const moduleName = modules[i];
                const modulePath = modulePaths[i].replaceAll('./', ''); // Adjusting the path
                const svgFileName = moduleSvgs[moduleName]; // Use the output from "Capture SVG and Inkdrop Data"
                const svgUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${svgBranch}/inkdrop-data/PR${prId}/${encodeURIComponent(svgFileName)}?raw=true`;
                const readmePath = path.join(workingDir, `${modulePath}/README.md`);
                const inkdropDataName = moduleJsons[moduleName];
                const inkdropDataUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${svgBranch}/inkdrop-data/PR${prId}/${encodeURIComponent(inkdropDataName)}`;

                let readmeContent = `## Inkdrop Diagram\n![Inkdrop Diagram](${svgUrl})\n*[Inkdrop Data JSON](${inkdropDataUrl}). Install the [Inkdrop Chrome Extension](https://chromewebstore.google.com/detail/visualize-your-terraform/pddpcicnnongifmhilbamagnhiiibkki) to hide this caption and enable interactive mode.*`;

                try {
                    // Try to get existing content if README already exists
                    const response = await github.rest.repos.getContent({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        path: readmePath,
                        ref: branch
                    });

                    // If the file exists, decode its content and append or modify the diagram link
                    if (response.data.sha) {
                        const buff = Buffer.from(response.data.content, 'base64');
                        readmeContent = buff.toString('utf-8');
                        if (readmeContent.includes("![Inkdrop Diagram]")) {
                            if (readmeContent.includes("*[Inkdrop Data JSON]")) {
                                readmeContent = readmeContent.replace(/\*\[Inkdrop Data JSON\].*\*/g, "");
                            }
                            readmeContent = readmeContent.replace(/!\[Inkdrop Diagram\]\(.*\)/g,
                                `![Inkdrop Diagram](${svgUrl})\n*[Inkdrop Data JSON](${inkdropDataUrl}). Install the [Inkdrop Chrome Extension](https://chromewebstore.google.com/detail/visualize-your-terraform/pddpcicnnongifmhilbamagnhiiibkki) to hide this caption and enable interactive mode.*`);
                        }
                    }
                } catch (error) {
                    console.error(`Error fetching README for ${moduleName}:`, error);
                    if (error.status !== 404) {
                        throw error;
                    }
                }

                // Convert updated content to Base64 for GitHub API
                const contentBase64 = Buffer.from(readmeContent).toString('base64');
                tree.push({
                    path: readmePath,
                    mode: '100644', // Represents a blob (file)
                    type: 'blob',
                    content: readmeContent
                });
            }

            // Create a new tree
            const { data: newTree } = await github.rest.git.createTree({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base_tree: (await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${branch}`,
                })).data.object.sha,
                tree
            });

            const parent = (await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch}`,
            })).data.object.sha;

            // Create a commit
            const commit = await github.rest.git.createCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                message: `Updating READMEs with Inkdrop Diagram links - PR#${prId}`,
                tree: newTree.sha,
                parents: [parent]
            });

            // Update reference to point to the new commit
            await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch}`,
                sha: commit.data.sha
            });
        env:
          HEAD_BRANCH: ${{ github.head_ref }}
